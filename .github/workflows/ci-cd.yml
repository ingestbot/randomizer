name: CI/CD Pipeline - randomizer

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions: read-all

jobs:
  build:
    runs-on: ubuntu-latest

    #    permissions:
    #      contents: read
    #      packages: read
    #      # To report GitHub Actions status checks
    #      # statuses: write

    env:
      DOCKER_USERNAME: ingestbot
      DOCKER_IMAGE_NAME: randomizer

    #services:
    #  docker:
    #    image: docker:19.03.12
    #    options: >-
    #      --privileged
    #      --name docker
    #      -v /var/run/docker.sock:/var/run/docker.sock

    steps:
      - name: Set up environment variables
        run: echo "SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)" >> "$GITHUB_ENV"

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Dependencies
        # run: pip install -r requirements-ci.txt
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements-ci.txt

      #- name: TruffleHog OSS
      #  uses: trufflesecurity/trufflehog@v3.82.8

      #- name: Super-Linter
      #  uses: super-linter/super-linter@v7.1.0
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    VALIDATE_PYTHON_PYLINT: false
      #    VALIDATE_JSCPD: false
      #    # VALIDATE_MARKDOWN: false

      #- name: Run tests
      #  run: |
      #    source venv/bin/activate
      #    PYTHONPATH=. pytest tests/test_main.py -vv

      #
      # https://github.com/marketplace/actions/docker-setup-buildx
      #
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: build local container
        uses: docker/build-push-action@v4
        with:
          tags: localbuild/testimage
          push: false
          load: true

      #- name: Anchore Container Scan
      #  uses: anchore/scan-action@v5.0.0
      #  with:
      #    image: "localbuild/testimage"

      #- name: Run Docker Container
      #  id: run_container
      #  run: |
      #    # container_id=$(docker run -d localbuild/testimage)
      #    container_id=$(docker run -d -v /var/run/docker.sock:/var/run/docker.sock localbuild/testimage)
      #    echo "Container ID: $container_id"
      #    echo "::set-output name=id::$container_id"

      - name: Check Docker Socket
        run: ls -l /var/run/docker.sock || echo "Docker socket not found"

      - name: Run Docker Container with Group Add
        run: |
          set +e  # Disable immediate exit on error
          container_id=$(docker run -d --group-add docker -v /var/run/docker.sock:/var/run/docker.sock localbuild/testimage)
          echo "Container ID: $container_id"
          exit_code=$(docker wait "$container_id")
          echo "Container exited with status $exit_code"
          if [ "$exit_code" -ne 0 ]; then
            echo "Fetching logs from container $container_id"
            docker logs "$container_id" || true
          fi
